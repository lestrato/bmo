#!/usr/bin/env python
"""Provides route_distance, a method for graphs.

route_distance computes the total cost of a path on an edge-weighted graph
"""

import errors

def route_distance(graph, route):
    """
    Given a graph, route, return the total cost of the route just using dictionary lookup

    * assumes the graph is a correct defaultdict generated by graph_utils.py's "make_graph"

    Args:
        graph: the standard graph defaultdict that represents vertices and edges (see graph.py)
        route: a string, composed of only vertices representing the route to take in the graph

    Returns:
        The cost of the route in the graph, or 'NO SUCH ROUTE' if it doesn't exist

    Raises:
        DoesNotExistError: If one of the vertices on the route doesn't exist in the graph
    """

    ''' ERROR HANDLING '''
    # make sure the vertices exist in the graph
    for vertex in route:
        if vertex not in [v for (v, tuple) in graph.iteritems()]:
            raise errors.DoesNotExistError('"{0}" does not exist as a connected vertex in the graph'.format(vertex))

    cost = 0
    for i in range(len(route) - 1):
        v1 = route[i] # get the vertex v1 of edge v1 -> v2
        v2 = route[i+1] # get the vertex v2 of edge v1 -> v2

        edge_cost = dict(graph.get(v1)).get(v2, None) # get the cost between the two vertices

        if edge_cost == None:
            return 'NO SUCH ROUTE'

        cost += edge_cost
    return cost
